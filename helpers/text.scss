// ------------------------
//         Text
// ------------------------

@use "sass:map";

@use "../configs/mq.scss";
@use "../configs/colors.scss";
@use "../configs/fonts.scss";
@use "../configs/text.scss";

@use "../helpers/spaces.scss";

// ------------------------
// Typography
// ------------------------

// Heading

.text-heading {
  font-family: fonts.$title;
  font-weight: 700;
}

@mixin setProperties($properties) {
  @each $property, $value in $properties {
    #{$property}: $value;
  }
}

@mixin computeStyle($styleConfig) {
  @each $mqKey, $properties in $styleConfig {
    @if index(mq.$name-available, $mqKey) == null {
      // in this case $mqKey is a top level property
      $property: (
        $mqKey: $properties,
      );
      @include setProperties($property);
    } @else {
      @if $mqKey == nth(mq.$name-available, 1) {
        @include setProperties($properties);
      } @else {
        @include mq.media(map.get(mq.$name-map, $mqKey)...) {
          @include setProperties($properties);
        }
      }
    }
  }
}

@mixin headingStyles($level) {
  $level-config: text.getHeadingConfig($level);
  @include computeStyle($level-config);
}

@if length(text.$heading-config) >= 1 {
  $keys: map-keys(text.$heading-config);
  $key: nth($keys, 1);
  $level-config: map-get(text.$heading-config, $key);

  h1,
  .text-#{$key} {
    @extend .text-heading;
    @extend .my-5;
    @include computeStyle($level-config);
  }
}

@if length(text.$heading-config) >= 2 {
  $keys: map-keys(text.$heading-config);
  $key: nth($keys, 2);
  $level-config: map-get(text.$heading-config, $key);

  h2,
  .text-#{$key} {
    @extend .text-heading;
    @extend .my-4;
    @include computeStyle($level-config);
  }
}

@if length(text.$heading-config) >= 3 {
  $keys: map-keys(text.$heading-config);
  $key: nth($keys, 3);
  $level-config: map-get(text.$heading-config, $key);

  h3,
  .text-#{$key} {
    @extend .text-heading;
    @extend .my-3;
    @include computeStyle($level-config);
  }
}

@if length(text.$heading-config) >= 4 {
  $keys: map-keys(text.$heading-config);
  $key: nth($keys, 4);
  $level-config: map-get(text.$heading-config, $key);

  h4,
  .text-#{$key} {
    @extend .text-heading;
    @extend .my-3;
    @include computeStyle($level-config);
  }
}

@if length(text.$heading-config) >= 5 {
  $keys: map-keys(text.$heading-config);
  $key: nth($keys, 5);
  $level-config: map-get(text.$heading-config, $key);

  h5,
  .text-#{$key} {
    @extend .text-heading;
    @extend .my-2;
    @include computeStyle($level-config);
  }
}

@if length(text.$heading-config) >= 6 {
  $keys: map-keys(text.$heading-config);
  $key: nth($keys, 6);
  $level-config: map-get(text.$heading-config, $key);

  h6,
  .text-#{$key} {
    @extend .text-heading;
    @extend .my-2;
    @include computeStyle($level-config);
  }
}

// Body

@mixin bodyStyles($key) {
  $text-config: text.getTextConfig($key);
  @include computeStyle($text-config);
}

@each $name, $config in text.$text-config {
  .text-#{$name} {
    @include computeStyle($config);
  }
}

@if map-has-key(text.$text-config, "small") {
  small {
    @extend .text-small;
  }
}

@if map-has-key(text.$text-config, "regular") {
  body {
    @extend .text-regular;
  }
}

// ------------------------
// Tools
// ------------------------

// family

.text-title {
  font-family: fonts.$title;
}

.text-body {
  font-family: fonts.$base;
}

// positions

.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-noWrap {
  white-space: nowrap;
}

.text-wrap {
  white-space: break-spaces;
}

// decoration

strong,
em,
.text-bold {
  font-weight: 700;
}

.text-light {
  font-weight: 300;
}

u,
.text-underline {
  text-decoration: underline;
}

.text-italic {
  font-style: italic;
}

.text-uppercase {
  text-transform: uppercase;
}

// color

.text-black {
  color: colors.$black;
}

.text-darkGrey {
  color: colors.$grey-dark;
}

.text-lightGrey {
  color: colors.$grey-light;
}

.text-white {
  color: colors.$white;
}

.text-primary {
  color: colors.$primary;
}

.text-secondary {
  color: colors.$secondary;
}
